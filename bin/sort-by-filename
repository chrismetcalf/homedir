#!/usr/bin/env ruby
#
# == Synopsis
#
# sort-by-filename: sorts files by, well, filename
#
# == Usage
#
# sort-by-filename [OPTION] ... FROM-DIR TO-DIR
#
# -h, --help:
#    show help
#
# --verbose:
#    be loud and proud
#
# FROM-DIR: The directory to copy from.
# TO-DIR: The directory to copy to.

require 'getoptlong'
require 'logger'
require 'fileutils'

LOGGER = Logger.new(STDOUT)
LOGGER.level = Logger::WARN

def process_file(filename, to_dir)
  matches = / - ([^-]+) -/.match(filename)

  if !matches.nil?
    if !File.directory? to_dir + "/" + matches[1]
      LOGGER.debug "Creating directory for \"#{matches[1]}\""
      FileUtils.mkdir_p to_dir + "/" + matches[1]
    end

    LOGGER.debug "Moving \"#{filename}\" to \"#{to_dir}/#{matches[1]}\""
    FileUtils.mv(filename, to_dir + "/" + matches[1])
  else
    LOGGER.info "No match for \"#{filename}\""
  end
end

opts = GetoptLong.new(
  [ '--verbose',  '-v', GetoptLong::NO_ARGUMENT ],
  [ '--log-file', '-l', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--pattern',  '-p', GetoptLong::REQUIRED_ARGUMENT ]
)


opts.each do |opt, arg|
  case opt
  when '--verbose'
    LOGGER.level = Logger::DEBUG

  when '--log-file'
    LOGGER = Logger.new(arg)
  end
end

if ARGV.length != 2
  LOGGER.fatal "Missing VICTIM or TO-DIR"
  exit 1
end

victim = ARGV.shift
to_dir = ARGV.shift

if !File.directory? to_dir
  LOGGER.fatal "Destination directory \"#{to_dir}\" does not exist!"
  exit 1
end

if File.directory? victim
  # Loop through our files
  Dir.new(victim).entries.each do |file|
    next if file == '..' || file == '.'

    process_file(victim + "/" + file, to_dir)
  end
elsif File.exists? victim
  # Process the single file
  process_file(victim, to_dir)
else
  LOGGER.fatal "Source file or directory \"#{victim}\" does not exist!"
  exit 1
end

