[user]
  name = Chris Metcalf
  email = chris@chrismetcalf.net

[push]
  default = tracking

[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto

[alias]
  # add
  a = add                           # add
  chunkyadd = add --patch           # stage commits chunk by chunk

  # branch
  b = branch -v                     # branch (verbose)

  # commit
  c = commit -m                     # commit with message
  ca = commit -am                   # commit all with message
  ci = commit                       # commit
  amend = commit --amend            # ammend your last commit
  ammend = commit --amend           # ammend your last commit

  # checkout
  co = checkout                     # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change

  # log
  log = log --decorate --graph --date=short
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  changelog = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue) <%ae>%Creset' --abbrev-commit
  lol = log --color=auto --pretty=format:'%h... %Cgreen[%an] %Cred(%ar) %Creset %s' --abbrev-commit --since='2 day ago'
  llol = log --color=auto --pretty=format:'%h... %Cgreen[%an] %Cred(%ar) %Creset %s' --abbrev-commit
  ltd = log --color=auto --pretty=format:'%h\t%an\t%ai\t%s' --abbrev-commit

  # pull
  pl = pull                         # pull

  # push
  ps = push                         # push

  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase

  # remote
  r = remote -v                     # show remotes (verbose)

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status                        # status
  st = status                       # status
  stat = status                     # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  ci = !sake git:push
  up = pull --rebase
  upa = !sake git:update:all
  open = !sake git:open NAME= -- $1
  close = !sake git:close NAME= -- $1
  fold = !sake git:fold
  sq = !sake git:squash
  co = checkout
  pr = pull --rebase
  merge-candidate = !git checkout staging && git pull --rebase && git merge origin/master && git push
  merge-production = !git checkout release && git pull --rebase && git merge origin/staging && git push
  candidate-log = log head^.. --no-merges --date-order --reverse --shortstat --abbrev-commit
  pick = cherry-pick
  spr = !git stash && git pull --rebase && git stash pop
  rebase-submodules = !git submodule foreach 'git checkout master && git fetch && git rebase origin/master'
  stache = stash

[diff]
  renamelimit = 20000

[core]
  editor = vim

[help]
  autocorrect = 1

[filter "media"]
  required = true
  clean = git media clean %f
  smudge = git media smudge %f

[pager]
  diff = diff-so-fancy | less --tabs=1,5 -RFX
  show = diff-so-fancy | less --tabs=1,5 -RFX

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  required = true
  process = git-lfs filter-process

[include]
  path = ~/.gitconfig.local
